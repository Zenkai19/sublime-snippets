<snippet>
	<content><![CDATA[
typedef int Cap;
typedef int Cost;
const int MAXN = 2010;
Cap CINF = 1e9; // Warning check type of infinity
Cost INF = 1e9; // Warning check type of infinity   
struct graph{
    struct Edge{int x, y; Cap cap; Cost cost; int id;};
    
    int N, prev[MAXN];
    
    Cost dist[MAXN], phi[MAXN];
    
    vector<Edge> E;
    vector<int> g[MAXN];
    
    graph(int _N) : N(_N){ }
    
    void add_edge(int x, int y, Cap cap, Cost cost, int opt = -1){
        Edge e1 = {x, y, cap, cost, opt}, e2 = {y, x, 0, -cost, -1};
        g[x].pb(E.size()); E.pb(e1);
        g[y].pb(E.size()); E.pb(e2);
    }
    
    // Note: In SSSP, the distance from the source 's' to 'v' is dist[v] + phi[v] - phi[x]
    bool augment(int s, int t){
        int x, y;
        for(int i = 0; i <= N; i++) prev[i] = -1, dist[i] = INF;
        dist[s] = prev[s] = 0;
        
        set<pair<Cost, int> > q;
        q.insert(make_pair(dist[s], s));
        
        while(!q.empty()){
            x = q.begin()->second; q.erase(q.begin());
            
            for(auto it: g[x]){
                Edge &e = E[it];
                if(e.cap <= 0) continue;
                
                y = e.y;
                Cost ncost = e.cost + phi[x] - phi[y];
                
                if(dist[x] + ncost < dist[y]){
                    q.erase(make_pair(dist[y], y));
                    dist[y] = dist[x] + ncost;  // New distance to node
                    prev[y] = it;              // The edge from which you arrive here
                    q.insert(make_pair(dist[y], y));
                }   
            }
        }
        
        if(prev[t] == -1) return false; else return true;
    }
    
    pair<Cap, Cost> mcf(int s, int t, int nn=CINF){ // returns (flow, cost)
        Cap flow = 0; Cost cost = 0;
        for(int i = 0; i <= N; i++) phi[i] = 0;
        
        while(true){
            if(!augment(s, t) || flow==nn) break;
            
            Cap z = nn-flow;
            
            for(int i = t; i != s; i = E[prev[i]].x) z = min(z, E[prev[i]].cap);
            for(int i = t; i != s; i = E[prev[i]].x) E[prev[i]].cap -= z, E[prev[i]^1].cap += z;
            
            flow += z;
            cost += z * (dist[t] - phi[s] + phi[t]);
            
            for(int i = 0; i <= N; i++) if(prev[i] != -1) phi[i] += dist[i];
        }
        return make_pair(flow, cost);
    }   
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>min-cost-flow</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
